<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%><%_ include ../../common/functions.ejs _%>
package <%=packageName%>.web.rest;

import com.codahale.metrics.annotation.Timed;
<%_ if (dto !== 'mapstruct' || service === 'no') { _%>
import <%=packageName%>.domain.<%= entityClass %>;
<%_ } _%>
<%_ if (service !== 'no') { _%>
import <%=packageName%>.service.<%= entityClass %>Service;
<%_ } else { _%>
import <%=packageName%>.repository.<%= entityClass %>Repository;
    <%_ if (reactiveRepositories) { _%>
import <%=packageName%>.repository.reactive.<%= entityClass %>ReactiveRepository;
    <%_ } _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
import <%=packageName%>.repository.search.<%= entityClass %>SearchRepository;
    <%_ } _%>
<%_ } _%>
<%_ if (saveUserSnapshot) { _%>
import <%=packageName%>.repository.UserRepository;
<%_ } _%>
import <%=packageName%>.web.rest.errors.BadRequestAlertException;
import <%=packageName%>.web.rest.util.HeaderUtil;<% if (pagination !== 'no') { %>
import <%=packageName%>.web.rest.util.PaginationUtil;<% } %>
import <%=packageName%>.service.dto.IdArrayDTO;
<%_ if (dto === 'mapstruct') { _%>
import <%=packageName%>.service.dto.*; //@Trifon
import <%=packageName%>.service.dto.<%= entityClass %>DTO;
<%_ if (service === 'no') { _%>
import <%=packageName%>.service.mapper.<%= entityClass %>Mapper;
<%_ } } _%>
<%_ if (jpaMetamodelFiltering) {  _%>
import <%=packageName%>.service.dto.<%= entityClass %>Criteria;
import <%=packageName%>.service.<%= entityClass %>QueryService;
<%_ } _%>
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
<%_ if (pagination !== 'no') { _%>
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
<%_ } _%>
<%_ if (reactiveRepositories) { _%>
import org.springframework.http.MediaType;
<%_ } _%>
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
<%_ if (reactiveRepositories) { _%>
import reactor.core.publisher.Flux;
<%_ } _%>

<%_ if (validation) { _%>
import javax.validation.Valid;
<%_ } _%>
import java.net.URI;
import java.net.URISyntaxException;
<%_ const viaService = service !== 'no';
    if (pagination === 'no' && dto === 'mapstruct' && !viaService && fieldsContainNoOwnerOneToOne === true) { _%>
import java.util.LinkedList;<% } %>
import java.util.List;
import java.util.Optional;<% if (databaseType === 'cassandra') { %>
import java.util.UUID;<% } %><% if (!viaService && (searchEngine === 'elasticsearch' || fieldsContainNoOwnerOneToOne === true)) { %>
import java.util.stream.Collectors;<% } %><% if (searchEngine === 'elasticsearch' ||Â fieldsContainNoOwnerOneToOne === true) { %>
import java.util.stream.StreamSupport;<% } %><% if (searchEngine === 'elasticsearch') { %>

import static org.elasticsearch.index.query.QueryBuilders.*;<% } %>

/**
 * REST controller for managing <%= entityClass %>.
 */
@RestController
@RequestMapping("/api")
public class <%= entityClass %>Resource {

    private final Logger log = LoggerFactory.getLogger(<%= entityClass %>Resource.class);

    <%_ let entityName = entityInstance;
    if (clientRootFolder && !skipUiGrouping) {
        entityName = _.camelCase(`${clientRootFolder}${entityClass}`);
    } _%>
    private static final String ENTITY_NAME = "<%= entityName %>";
    <%_
    const instanceType = (dto === 'mapstruct') ? entityClass + 'DTO' : entityClass;
    const instanceName = (dto === 'mapstruct') ? entityInstance + 'DTO' : entityInstance;
    _%><%- include('../../common/inject_template', {viaService: viaService, constructorName: entityClass + 'Resource', queryService: jpaMetamodelFiltering}); -%>

    /**
     * POST  /<%= entityApiUrl %> : Create a new <%= entityInstance %>.
     *
     * @param <%= instanceName %> the <%= instanceName %> to create
     * @return the ResponseEntity with status 201 (Created) and with body the new <%= instanceName %>, or with status 400 (Bad Request) if the <%= entityInstance %> has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/<%= entityApiUrl %>")
    @Timed
    public ResponseEntity<<%= instanceType %>> create<%= entityClass %>(<% if (validation) { %>@Valid <% } %>@RequestBody <%= instanceType %> <%= instanceName %>) throws URISyntaxException {
        log.debug("REST request to save <%= entityClass %> : {}", <%= instanceName %>);
        if (<%= instanceName %>.getId() != null) {
            throw new BadRequestAlertException("A new <%= entityInstance %> cannot already have an ID", ENTITY_NAME, "idexists");
        }
        <%_ if (saveUserSnapshot) { %>
        if (<%= instanceName %>.getUser() != null) {
            // Save user in case it's new and only exists in gateway
            userRepository.save(<%= instanceName %>.getUser());
        }
        <%_ } _%>
        <%_ if (databaseType === 'cassandra') { _%>
        <%= instanceName %>.setId(UUID.randomUUID());
        <%_ } _%>
<%- include('../../common/save_template', {viaService: viaService, returnDirectly: false}); -%>
        return ResponseEntity.created(new URI("/api/<%= entityApiUrl %>/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /<%= entityApiUrl %> : Updates an existing <%= entityInstance %>.
     *
     * @param <%= instanceName %> the <%= instanceName %> to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated <%= instanceName %>,
     * or with status 400 (Bad Request) if the <%= instanceName %> is not valid,
     * or with status 500 (Internal Server Error) if the <%= instanceName %> couldn't be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/<%= entityApiUrl %>")
    @Timed
    public ResponseEntity<<%= instanceType %>> update<%= entityClass %>(<% if (validation) { %>@Valid <% } %>@RequestBody <%= instanceType %> <%= instanceName %>) throws URISyntaxException {
        log.debug("REST request to update <%= entityClass %> : {}", <%= instanceName %>);
        if (<%= instanceName %>.getId() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        <%_ if (saveUserSnapshot) { %>
        if (<%= instanceName %>.getUser() != null) {
            // Save user in case it's new and only exists in gateway
            userRepository.save(<%= instanceName %>.getUser());
        }
        <%_ } _%>
<%- include('../../common/save_template', {viaService: viaService, returnDirectly: false}); -%>
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, <%= instanceName %>.getId().toString()))
            .body(result);
    }

    /**
     * GET  /<%= entityApiUrl %> : get all the <%= entityInstancePlural %>.
     *<% if (pagination !== 'no') { %>
     * @param pageable the pagination information<% } if (!jpaMetamodelFiltering && fieldsContainOwnerManyToMany) { %>
     * @param eagerload flag to eager load entities from relationships (This is applicable for many-to-many)<% } if (jpaMetamodelFiltering) { %>
     * @param criteria the criterias which the requested entities should match<% } else if (fieldsContainNoOwnerOneToOne) { %>
     * @param filter the filter of the request<% } %>
     * @return the ResponseEntity with status 200 (OK) and the list of <%= entityInstancePlural %> in body
     */
    @GetMapping("/<%= entityApiUrl %>")
    @Timed<%- include('../../common/get_all_template', {viaService: viaService}); -%>

    <%_ if (reactiveRepositories) { _%>
    /**
     * GET  /<%= entityApiUrl %> : get all the <%= entityInstancePlural %> as a stream.
     * @return the Flux of <%= entityInstancePlural %>
     */
    @GetMapping(value = "/<%= entityApiUrl %>", produces = MediaType.APPLICATION_STREAM_JSON_VALUE)
    @Timed
    public Flux<<%= instanceType %>> getAll<%= entityClassPlural %>AsStream() {
        log.debug("REST request to get all <%= entityClassPlural %> as a stream");
        <%_ if (viaService) { _%>
        return <%= entityInstance %>Service.findAllAsFlux();
        <%_ } else { _%>
        return <%= entityInstance %>ReactiveRepository.findAll();
        <%_ } _%>
    }

    <%_ } _%>
    /**
     * GET  /<%= entityApiUrl %>/:id : get the "id" <%= entityInstance %>.
     *
     * @param id the id of the <%= instanceName %> to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the <%= instanceName %>, or with status 404 (Not Found)
     */
    @GetMapping("/<%= entityApiUrl %>/{id}")
    @Timed
    public ResponseEntity<<%= instanceType %>> get<%= entityClass %>(@PathVariable <%= pkType %> id) {
        log.debug("REST request to get <%= entityClass %> : {}", id);<%- include('../../common/get_template', {viaService: viaService, returnDirectly:false}); -%>
        return ResponseUtil.wrapOrNotFound(<%= instanceName %>);
    }

    /**
     * GET  /<%= entityApiUrl %>/template : get the Template JSON for <%= entityInstance %>.
     *
     * @return the ResponseEntity with status 200 (OK) and with body the <%= instanceName %>, or with status 404 (Not Found)
     */
    @GetMapping("/<%= entityApiUrl %>/template")
    @Timed
    public ResponseEntity<<%= instanceType %>> getTemplate<%= entityClass %>() {
        log.debug("REST request to get Template for <%= entityClass %>");        

        <%= instanceType %> <%= instanceName %> = new <%= instanceType %>();
        // Populate all automatically populated fields!
//        <%= instanceName %>.setCode();

        return ResponseEntity.ok().body(<%= instanceName %>);
    }
<%_ for (idx in relationships) {
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipNamePlural = relationships[idx].relationshipNamePlural;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(name, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityName = relationships[idx].otherEntityName;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        if (relationshipType === 'one-to-many') { _%>

    @GetMapping("/<%= entityApiUrl %>/{id}/<%= relationshipNamePlural %>/template")
    @Timed
    public ResponseEntity<<%= otherEntityNameCapitalized %>DTO> get<%= firstToUpper(relationshipName) %>Template(@PathVariable Long id) {
        log.debug("REST request to get Template for <%= firstToUpper(relationshipNamePlural) %> in <%= entityClass %> : {}", id);

        Optional<<%= instanceType %>> <%= instanceName %> = <%= entityInstance %>Service.findOne(id);
        if (!<%= instanceName %>.isPresent()) {
        	return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        <%= otherEntityNameCapitalized %>DTO <%= otherEntityName %>DTO = new <%= otherEntityNameCapitalized %>DTO();
        <%= otherEntityName %>DTO.set<%= entityClass %>Id(id);
        // Populate all automatically populated fields!
//      <%= otherEntityName %>DTO.setCode(...);

		HttpHeaders headers = HeaderUtil.createHiddenFieldsHeader("<%= firstToLower(entityClass) %>Id");

        return ResponseEntity.ok().headers(headers).body(<%= otherEntityName %>DTO);
    }
<%_ }
} _%>

    /**
     * DELETE  /<%= entityApiUrl %>/:id : delete the "id" <%= entityInstance %>.
     *
     * @param id the id of the <%= instanceName %> to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/<%= entityApiUrl %>/{id}")
    @Timed
    public ResponseEntity<Void> delete<%= entityClass %>(@PathVariable <%= pkType %> id) {
        log.debug("REST request to delete <%= entityClass %> : {}", id);
<%- include('../../common/delete_template', {viaService: viaService}); -%>
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id<% if (pkType !== 'String') { %>.toString()<% } %>)).build();
    }<% if (searchEngine === 'elasticsearch') { %>

    /**
     * DELETE  /<%= entityApiUrl %>/ : delete list of <%= entityInstancePlural %>.
     *
     * @param IdArrayDTO the list with <%= entityClass %> ids to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    //   Delete multiple records using REST
    // - https://stackoverflow.com/questions/21863326/delete-multiple-records-using-rest
    @DeleteMapping("/<%= entityApiUrl %>")
    @Timed
    public ResponseEntity<Void> delete<%= entityClassPlural %>(@Valid @RequestBody IdArrayDTO idArrayDTO) {
        log.debug("REST request to delete MULTIPLE <%= entityClassPlural %> : {}", idArrayDTO);
        for (Long id : idArrayDTO.getIds()) {
    <%- include('../../common/delete_template', {viaService: viaService}); -%>
        }
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, idArrayDTO.getIds().toString())).build();
    }

    /**
     * SEARCH  /_search/<%= entityApiUrl %>?query=:query : search for the <%= entityInstance %> corresponding
     * to the query.
     *
     * @param query the query of the <%= entityInstance %> search<% if (pagination !== 'no') { %>
     * @param pageable the pagination information<% } %>
     * @return the result of the search
     */
    @GetMapping("/_search/<%= entityApiUrl %>")
    @Timed<%- include('../../common/search_template', {viaService: viaService}); -%><% } %>

<%_ for (idx in fields) {
      const fieldType = fields[idx].fieldType;
      const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
      const fieldName = fields[idx].fieldName;
      const fieldInJavaBeanMethod = fields[idx].fieldInJavaBeanMethod;
      if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('unique')) { _%>
	/**
	 * Import <%= entityInstance %> by <%= fieldName %> from .csv file
	 * 
	 * @param file
	 * @return
	 * @throws URISyntaxException, IOException
	 */
	@PostMapping("/<%= entityApiUrl %>/import-by-<%= fieldName %>.csv")
	@Timed
	public ResponseEntity<String> import<%= entityClass %>By<%= fieldInJavaBeanMethod %>(@RequestParam("file") MultipartFile file) throws URISyntaxException, IOException {
		if (!file.isEmpty()) {
			log.debug("REST request to import <%= entityClass %> by <%= fieldName %> with file: {}", file);
			BufferedReader buffReader = null;
			try {
				// Open the file
				buffReader = new BufferedReader(new InputStreamReader(file.getInputStream()));

				int numImportedRecords = 0;
				boolean isFirstLine = true;
				String strLine;
				// Read file line by line
				while ((strLine = buffReader.readLine()) != null) {
					if (isFirstLine) {  // TODO - Add it as parameter of REST request.
						isFirstLine = false;
					} else {
						String[] columns = strLine.split(";"); // TODO - Add separator as parameter of REST request.

						<%= instanceType %> <%= instanceName %> = <%= entityInstance %>Service.import<%= entityClass %>By<%= fieldInJavaBeanMethod %>(columns);

						<%= instanceName %> = <%= entityInstance %>Service.save(<%= instanceName %>);

						numImportedRecords = numImportedRecords + 1;
					}
				}
				return ResponseEntity.ok().body(String.format("Imported #%s records from file %s", numImportedRecords, file.getOriginalFilename()));
			} finally {
				if (buffReader != null) {
					buffReader.close();
				}
			}
		} else {
			return ResponseEntity.ok().body("File is empty, no records were imported.");
		}
	}

<%_ }
}
_%>
}
